name: Publish Release

on:
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  block-non-main:
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ "${GITHUB_REF_NAME}" != "main" ]]; then
            echo "🚫 Manual dispatch is only allowed from the 'main' branch."
            exit 1
          fi
          echo "✅ Branch '${GITHUB_REF_NAME}' allowed. Continuing..."

  validate-version:
      needs: block-non-main
      runs-on: ubuntu-latest
      outputs:
        version: ${{ steps.check.outputs.version }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Install yq
          run: |
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq

        - name: Validate version format
          id: check
          run: |
            VERSION=$(yq '.project.version' go.package.yml)
            if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9\.-]+)?$ ]]; then
              echo "❌ Invalid version format: $VERSION"
              echo "✅ Expected format: v1.2.3 or v1.2.3-beta.1"
              exit 1
            fi

            if [[ "$VERSION" =~ -dev.0$ ]]; then
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              VERSION="${VERSION%-dev.0}-dev.$TIMESTAMP"
              echo "⚠️ Unstamped development version detected. Updated version to: $VERSION"
              exit 1
            fi

            echo "✅ Valid version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT

  check-tag:
    needs: validate-version
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags and check for existing tag
        id: check
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git fetch --tags

          if git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $VERSION does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: [validate-version, check-tag]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Read front version from go.package.yml
        id: parse_yaml
        run: |
          FRONT_VERSION=$(yq '.project.dependencies.front' go.package.yml)
          echo "FRONT_VERSION=$FRONT_VERSION" >> $GITHUB_ENV

      - name: Clone go-api-front repo at specific version
        run: |
          git clone --depth 1 --branch $FRONT_VERSION https://github.com/Rafael24595/go-api-front.git

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install go-api-front dependencies and build
        working-directory: ./go-api-front
        run: |
          npm install
          npm run build

      - name: Prepare release directory
        run: |
          mkdir -p release/assets/front
          cp README.md release/
          cp go.mod release/
          cp go.package.yml release/
          cp swagger.yaml release/
          cp .env.template release/
          cp generate-goapi-cert.sh release/
          cp -r go-api-front/dist/* release/assets/front/
          cp -r go-api-front/package.json release/assets/front/
          if [ -d go-api-front/assets ]; then
            mkdir -p release/assets/front/assets
            cp -r go-api-front/assets/* release/assets/front/assets/
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'

      - name: Get version input
        id: get_version
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Push Git Tag
        run: |
           VERSION=${{ steps.get_version.outputs.version }}
           git config user.name "github-actions"
           git config user.email "github-actions@github.com"
           git tag $VERSION
           git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
           git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Linux binary
        if: runner.os == 'Linux'
        run: |
          VERSION=${{ needs.validate-version.outputs.version }}
          cp -r release "release-linux-$VERSION"
          GOOS=linux GOARCH=amd64 go build -o "release-linux-$VERSION/go-api-linux" .

      - name: Build Windows binary
        run: |
          VERSION=${{ needs.validate-version.outputs.version }}
          cp -r release "release-windows-$VERSION"
          GOOS=windows GOARCH=amd64 go build -o "release-windows-$VERSION/go-api-windows.exe" .

      - name: Zip release artifacts
        run: |
          VERSION=${{ needs.validate-version.outputs.version }}
          zip -r "release-linux-$VERSION.zip" "release-linux-$VERSION/"
          zip -r "release-windows-$VERSION.zip" "release-windows-$VERSION/"

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          files: |
            release-linux-${{ steps.get_version.outputs.version }}.zip
            release-windows-${{ steps.get_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
